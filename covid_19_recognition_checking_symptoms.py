# -*- coding: utf-8 -*-
"""Covid-19 Recognition Checking Symptoms.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UR-YFxohAatRIv-gHBJI_6Mb3zWViCdD
"""

# Dataset link: https://www.kaggle.com/hemanthhari/symptoms-and-covid-presence

import pandas as pd
import numpy as np
 
from sklearn import tree
from sklearn.model_selection import train_test_split
 
import collections
from collections import Counter
from PIL import Image

#tree plotting
from sklearn.tree import export_graphviz
from six import StringIO
from IPython.display import Image  
from sklearn.tree import export_graphviz
import pydotplus

#plotting graph
from matplotlib import pyplot as plt
import seaborn as sns
 
#present decision tree
import graphviz
import pydotplus
import io
from scipy import misc

#accuracy measurement
from sklearn.metrics import accuracy_score

#model library
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.neural_network import MLPClassifier
from sklearn.neighbors import KNeighborsClassifier


from sklearn.metrics import roc_curve
from sklearn.metrics import accuracy_score,f1_score,precision_score,recall_score,roc_auc_score

# Data visualization
data = pd.read_csv("Covid Dataset.csv")
data

# Check, is there any missing data in any row or column 
data.isnull().any()

# Describe dataset
data.describe()

# Rename column
data.rename(columns={'COVID-19':'COVID'}, inplace=True)
#data.head(5)

# Transform data string to numeric (Yes,No)=>(1,0)
#from sklearn.preprocessing import LabelEncoder
#l=LabelEncoder()
#data=data.apply(l.fit_transform).astype(int)
# Another way to do this:
for i in data.columns: 
    data[i] = np.where(data[i] =="Yes", 1, 0)
data.head(5)

# Co-relation between columns
cor=data.corr()
cor

# Drop the column of Sanitization from Market and Wearing Masks
data.drop(['Sanitization from Market', 'Wearing Masks'], axis = 'columns', inplace = True)
#data.to_csv('project_data.csv', index = False)
data.head()

# Taking all columns to a variable(named features)
features = data.columns
features

# Seperate deciding-factor column/class from all columns or from features variable
features=[x for x in features if x!='COVID']
features

# Dataset splition and create two dataset(train dataset,test dataset) from main dataset
# Test dataset size = 20% = 0.2
train, test = train_test_split(data, test_size = 0.3)

# Seperate deciding-factor column/class from train and test dataset
x_train = train[features]
y_train = train['COVID']

x_test = test[features]
y_test = test['COVID']

print(len(data))
print(len(train))
print(len(test))

# Created a model function for all ML-algorithm
def modelRun(model, name, x_train, y_train, x_test, y_test):
    model = model.fit(x_train, y_train)
    y_pred = model.predict(x_test)
    accuracy = accuracy_score(y_test, y_pred)
    recall = recall_score(y_test, y_pred)
    precision = precision_score(y_test, y_pred)
    f1 = f1_score(y_test, y_pred)
    roc_auc = roc_auc_score(y_test, y_pred)
    print("\n",name,":\n")
    print('Accuracy is  :' ,round(accuracy,2)*100)
    print('F1 score is :' ,round(f1,2)*100)
    print('Precision is  :',round(precision,2)*100)
    print('Recall is  :',round(recall,2)*100)
    print('Roc Auc is  :',round(roc_auc,2)*100)
    return y_pred

# Setup or initialize variable with ML algorithm
nb = GaussianNB()
rf = RandomForestClassifier(n_estimators=100, max_depth=2,random_state=0)
nn = MLPClassifier(hidden_layer_sizes=(20,20,20), max_iter = 900, activation = 'relu')
dt = DecisionTreeClassifier(min_samples_split = 100, criterion='entropy')

# After executing function modelrun(), it will provide predict value and print accuracy score for each ML algorithm 
y_pred_nb = modelRun(nb, "Gaussian Naive Bayes", x_train, y_train, x_test, y_test)
y_pred_rf = modelRun(rf, "Random Forest", x_train, y_train, x_test, y_test)
y_pred_nn = modelRun(nn, "Neural Network", x_train, y_train, x_test, y_test)
y_pred_dt = modelRun(dt, "Decision Tree", x_train, y_train, x_test, y_test)

fpr_nb, tpr_nb, threshold_nb = roc_curve(y_test, y_pred_nb)
fpr_rf, tpr_rf, threshold_rf = roc_curve(y_test, y_pred_rf)
fpr_nn, tpr_nn, threshold_nn = roc_curve(y_test, y_pred_nn)
fpr_dt, tpr_dt, threshold_dt = roc_curve(y_test, y_pred_dt)

# matplotlib
import matplotlib.pyplot as plt
plt.style.use('seaborn')

# plot roc curves
plt.plot(fpr_nb, tpr_nb, linestyle='dashdot',color='blue', label='Gaussian Naive Bayes')
plt.plot(fpr_nn, tpr_nn, linestyle='--',color='red', label='Neural Network')
plt.plot(fpr_rf, tpr_rf, linestyle='dotted',color='green', label='Random forest')
plt.plot(fpr_dt, tpr_dt, linestyle='dashed',color='black', label='Decision Tree')

#plt.plot(p_fpr, p_tpr, linestyle='solid', color='blue')
# title
plt.title('ROC curve')
# x label
plt.xlabel('False Positive Rate')
# y label
plt.ylabel('True Positive rate')

plt.legend(loc='best')
plt.savefig('ROC',dpi=300)
plt.show();

data['COVID'] = np.where(data['COVID'] == 1, "Yes", data['COVID'])
data['COVID'] = np.where(data['COVID'] == 0, "No", data['COVID'])

dot_data = StringIO()
export_graphviz(dt, out_file=dot_data, feature_names=features,class_names=data.COVID,filled=True, rounded=True,special_characters=True)
graph = pydotplus.graph_from_dot_data(dot_data.getvalue())  
Image(graph.create_png())

# Providing this info, you can check: Are you covid affected or not?
print("Enter the data of following",len(features),"symptoms for COVID checking :")
print("(If you have this symptoms enter 1 otherwise 0)")
arr = []
for i in range(len(features)):
    print("{}".format(features[i]))
    arr.append(int(input()))

arr = np.array(arr)
print(arr)
res = nn.predict(arr.reshape(-1,18))

if res == 1:
    print("Yes, you have covid")
else:
    print("No, you dont have covid")